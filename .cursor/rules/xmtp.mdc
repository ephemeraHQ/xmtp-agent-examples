---
alwaysApply: false
---

# Writing XMTP Agents

This SDK is based on familiar Node.js patterns: you register event listeners, compose middleware, and extend behavior just like you would in frameworks such as [Express](https://expressjs.com/). This makes it easy to bring existing JavaScript and TypeScript skills into building conversational agents.

## Installation

Choose your package manager:

```bash
npm install @xmtp/agent-sdk
# or
pnpm add @xmtp/agent-sdk
# or
yarn add @xmtp/agent-sdk
```

## Quick Start

```ts
import { Agent, createSigner, createUser, getTestUrl } from "@xmtp/agent-sdk";

// 1. Create a local user + signer (you can plug in your own wallet signer)
const user = createUser();
const signer = createSigner(user);

// 2. Spin up the agent
const agent = await Agent.create(signer, {
  env: "production", // or 'production'
});

// 3. Respond to text messages
agent.on("text", async (ctx) => {
  await ctx.conversation.send("Hello from my XMTP Agent! ğŸ‘‹");
});

// 4. Log when we're ready
agent.on("start", () => {
  console.log(`Waiting for messages...`);
  console.log(`Address: ${agent.client.accountIdentifier?.identifier}`);
  console.log(`ğŸ”—${getTestUrl(agent)}`);
});

await agent.start();
```

## Environment Variables

The XMTP Agent SDK allows you to use environment variables (`process.env`) for easier configuration without modifying code. Simply set the following variables and call `Agent.createFromEnv()`:

**Available Variables:**

| Variable                 | Purpose                                                                                                                      | Example                                 |
| ------------------------ | ---------------------------------------------------------------------------------------------------------------------------- | --------------------------------------- |
| `XMTP_WALLET_KEY`        | [Private key for wallet](https://docs.xmtp.org/inboxes/core-messaging/create-a-signer)                                       | `XMTP_WALLET_KEY=0x1234...abcd`         |
| `XMTP_ENV`               | [Network environment](https://docs.xmtp.org/agents/core-messaging/create-a-client#xmtp-network-environments)                 | `XMTP_ENV=dev` or `XMTP_ENV=production` |
| `XMTP_DB_ENCRYPTION_KEY` | [Database encryption key](https://docs.xmtp.org/agents/core-messaging/create-a-client#keep-the-database-encryption-key-safe) | `XMTP_DB_ENCRYPTION_KEY=0xabcd...1234`  |

Using the environment variables, you can setup your agent in just a few lines of code:

```ts
// Load variables from .env file
process.loadEnvFile(".env");

// Create agent using environment variables
const agent = await Agent.createFromEnv();
```

Agents can also recognize the following environment variables:

| Variable           | Purpose                                                              | Example                 |
| ------------------ | -------------------------------------------------------------------- | ----------------------- |
| `XMTP_FORCE_DEBUG` | [Activate debugging logs](https://docs.xmtp.org/agents/debug-agents) | `XMTP_FORCE_DEBUG=true` |

## Core Concepts

### 1. Eventâ€‘Driven Architecture

Subscribe only to what you need using Nodeâ€™s `EventEmitter` interface. Events you can listen for:

**Message Events**

- `text` â€“ a new incoming text message
- `reaction` â€“ a new incoming reaction message
- `reply` â€“ a new incoming reply message
- `attachment` â€“ a new incoming remote attachment message
- `unhandledMessage` â€“ a message that doesn't match any specific type

**Conversation Events**

- `dm` â€“ a new DM conversation
- `group` â€“ a new group conversation

**Lifecycle Events**

- `start` / `stop` â€“ agent lifecycle events
- `unhandledError` â€“ unhandled errors

**Example**

```ts
// Handle different message types
agent.on("text", async (ctx) => {
  console.log(`Text message: ${ctx.text}`);
});

agent.on("reaction", async (ctx) => {
  console.log(`Reaction: ${ctx.message.content}`);
});

agent.on("reply", async (ctx) => {
  console.log(`Reply to: ${ctx.message.content.reference}`);
});

// Handle new conversations
agent.on("dm", async (ctx) => {
  await ctx.conversation.send("Welcome to our DM!");
});

agent.on("group", async (ctx) => {
  await ctx.conversation.send("Hello group!");
});

// Handle uncaught errors
agent.on("unhandledError", (error) => {
  console.error("Agent error", error);
});
```

### 2. Middleware Support

Extend your agent with custom business logic using middlewares. Compose cross-cutting behavior like routing, telemetry, rate limiting, analytics, and feature flags, or plug in your own.

**Example**

```ts
import { CommandRouter } from "@xmtp/agent-sdk";

const router = new CommandRouter();

router.command("/version", async (ctx) => {
  await ctx.conversation.send(`v${process.env.npm_package_version}`);
});

agent.use(router.middleware());
```

### 3. Builtâ€‘in Filters

Instead of manually checking every incoming message, you can compose simple, reusable filters that make intent clear.

**Example**

```ts
import { filter, withFilter } from "@xmtp/agent-sdk";

// Using filter in message handler
agent.on(
  "text",
  withFilter(filter.startsWith("@agent"), async (ctx) => {
    await ctx.conversation.send("How can I help you?");
  }),
);

// Combination of filters
const combined = filter.and(filter.notFromSelf, filter.isText);

agent.on(
  "text",
  withFilter(combined, async (ctx) => {
    await ctx.conversation.send("You sent a text message âœ…");
  }),
);
```

For convenience, the `filter` object can also be imported as `f`:

```ts
// You can import either name:
import { f, filter } from "@xmtp/agent-sdk";

// Both work the same way:
const longVersion = filter.and(filter.notFromSelf, filter.isText);
const shortVersion = f.and(f.notFromSelf, f.isText);
```

You can find all available prebuilt filters [here](https://github.com/xmtp/xmtp-js/blob/main/sdks/agent-sdk/src/utils/filter.ts).

### 4. Rich Context

Every message event handler receives a `MessageContext` with:

- `message` â€“ the decoded message object
- `conversation` â€“ the active conversation object
- `client` â€“ underlying XMTP client
- Helpers like `sendTextReply()`, `sendReaction()`, `getSenderAddress`, and more

**Example**

```ts
agent.on("text", async (ctx) => {
  await ctx.sendTextReply("Reply using helper âœ¨");
});
```

## Adding Custom Content Types

Pass `codecs` when creating your agent to extend supported content:

```ts
const agent = await Agent.create(signer, {
  env: "dev",
  codecs: [new MyContentType()],
});
```

## Prompt example to code an agent

Prompt: "Lets create a multiplier agent that gets a number and returns its 2x multiple (use claude max)"

Code:

```ts
import fs from "fs";
import { Agent, createSigner, createUser, getTestUrl } from "@xmtp/agent-sdk";

process.loadEnvFile(".env");

const agent = await Agent.create(
  createSigner(createUser(process.env.XMTP_WALLET_KEY as `0x${string}`)),
  {
    env: process.env.XMTP_ENV as "local" | "dev" | "production",
    dbPath: getDbPath(),
  },
);

agent.on("text", async (ctx) => {
  const messageContent = ctx.message.content.trim();
  console.log("New message received: ", messageContent);

  try {
    // Parse the message to extract two numbers
    const result = parseAndMultiply(messageContent);
    await ctx.conversation.send(result);
  } catch (error) {
    console.error("Error processing message:", error);
    await ctx.conversation.send(
      "Please send two numbers separated by space, comma, or 'x'. Examples: '5 3', '5,3', '5 x 3', 'multiply 5 and 3'",
    );
  }
});

agent.on("dm", (ctx) => {
  console.log("New conversation created with id: ", ctx.conversation.id);
});

agent.on("start", () => {
  console.log(`Multiplication Agent is running...`);
  console.log(`Address: ${agent.client.accountIdentifier?.identifier}`);
  console.log(`ğŸ”—${getTestUrl(agent)}`);
  console.log(`Send me two numbers to multiply!`);
});

await agent.start();

function parseAndMultiply(message: string): string {
  // Remove common words and clean the message
  const cleanMessage = message
    .toLowerCase()
    .replace(/multiply|times|by|and|the|numbers?/g, "")
    .trim();

  // Try different patterns to extract two numbers
  let numbers: number[] = [];

  // Pattern 1: "5 x 3" or "5x3"
  let match = cleanMessage.match(/(\d+(?:\.\d+)?)\s*[x*Ã—]\s*(\d+(?:\.\d+)?)/);
  if (match) {
    numbers = [parseFloat(match[1]), parseFloat(match[2])];
  }

  // Pattern 2: "5, 3" or "5,3"
  if (numbers.length === 0) {
    match = cleanMessage.match(/(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)/);
    if (match) {
      numbers = [parseFloat(match[1]), parseFloat(match[2])];
    }
  }

  // Pattern 3: "5 3" (space separated)
  if (numbers.length === 0) {
    match = cleanMessage.match(/(\d+(?:\.\d+)?)\s+(\d+(?:\.\d+)?)/);
    if (match) {
      numbers = [parseFloat(match[1]), parseFloat(match[2])];
    }
  }

  // Pattern 4: Extract any two numbers from the message
  if (numbers.length === 0) {
    const allNumbers = cleanMessage.match(/\d+(?:\.\d+)?/g);
    if (allNumbers && allNumbers.length >= 2) {
      numbers = [parseFloat(allNumbers[0]), parseFloat(allNumbers[1])];
    }
  }

  if (numbers.length < 2) {
    throw new Error("Could not find two numbers to multiply");
  }

  const result = numbers[0] * numbers[1];
  return `${numbers[0]} Ã— ${numbers[1]} = ${result}`;
}

function getDbPath(description: string = "xmtp") {
  //Checks if the environment is a Railway deployment
  const volumePath = process.env.RAILWAY_VOLUME_MOUNT_PATH ?? ".data/xmtp";
  // Create database directory if it doesn't exist
  if (!fs.existsSync(volumePath)) {
    fs.mkdirSync(volumePath, { recursive: true });
  }
  return `${volumePath}/${process.env.XMTP_ENV}-${description}.db3`;
}
```
